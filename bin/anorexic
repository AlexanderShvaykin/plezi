#!/usr/bin/env ruby

#########
## set up building environment
BUILDING_ANOREXIC_TEMPLATE = true

##########
# this is the template writer
#
# you can update it by aliasing the old initialize and writing adding to it:
#
#		if defined? BUILDING_ANOREXIC_TEMPLATE
#			class AppTemplate
#				alias :old_init :initialize
#				def initialize
#					# start with the old initialize, to set the template up
#					old_init
#					# make sure your folder exists, but don't overwrite!!!
#					# if you overwrite!!! you might destroy other gems additions.
#					app_tree["new_folder"] ||= {}
#					# once your folder exists, create your file
#					app_tree["new_folder"]["filename.rb"] = "data"
#					app_tree["file_without_folder"] = "data"
#				end
#			end
#		end
#
class AppTemplate

	def initialize
		initialize_template_globals
		@app_tree = {}

		@app_tree["logs"] = {}
		@app_tree["config"] = {}
		@app_tree["lib"] = {}
		@app_tree["public"] = {"index.html" => @html_template}
		@app_tree["Gemfile"] = @gemfile_template
		@app_tree["framework.rb"] = @framework_template
	end

	def app_tree
		@app_tree
	end

	def build appname
		Dir.mkdir appname
		Dir.chdir appname
		puts "created the #{appname} application directory.".green
		puts "starting to write template data...".red
		puts ""
		@app_tree["#{appname}.rb"] = @app_template
		write_files app_tree
		File.chmod 0775, "#{appname}.rb"
		puts "tried to update execution permissions. this probably failed.".pink
		puts "use: chmod +x ./#{ARGV[1]}.rb to set execution permissions."
		puts ""
		puts "done."
		puts ""
		puts "please change directory into the app directory: cd #{ARGV[1]}"
		puts ""
		puts "run the #{ARGV[1]} app using: ./#{ARGV[1]}.rb or using: anorexic s"
		puts ""
	end

	def write_files files, parent = "."
		if files.is_a? Hash
			files.each do |k, v|
				if v.is_a? Hash
					Dir.mkdir k
					Dir.chdir k
					puts "    created #{parent}/#{k}".green
					write_files v, (parent + "/" + k)
					Dir.chdir ".."
				elsif v.is_a? String
					IO.write k, v
					puts "    wrote #{parent}/#{k}".yellow
				end
			end
		end
	end

	def initialize_template_globals
		@framework_template = <<ENDTEMPLATE

# Don't move this file.
#
# this file sets up the basic framework.
# the file uses it's location to set the Root path object.
# the file then loads all the .rb files from ./config and ./lib
# the file sets the default logger



# using bundler to load gems (including the anorexic gem)
require 'bundler'

# Using pathname extentions for setting public folder
require 'pathname'

# load all gems from gemfile
Bundler.require

#set up root object (some config files will use it as well as our app)
Root = Pathname.new(File.dirname(__FILE__)).expand_path

# load config files
Dir["{config}/**/*.rb"].each {|file| require Pathname.new(file).expand_path}

# load all library files
Dir["{lib}/**/*.rb"].each {|file| require Pathname.new(file).expand_path}

# set up Anorexic logs
Logger = ( Anorexic.create_logger Root.join('logs', 'server.log') )

ENDTEMPLATE
		@app_template = <<ENDTEMPLATE
#!/usr/bin/env ruby

## load all framework and gems
require './framework.rb'

## set up a non-encrypted service with file access
## (remove the file_root to disable public file access)
listen 3000, file_root: Root.join('public').to_s

## uncomment the following line to add an SSL server
# listen 3001, ssl_self: true, file_root: Root.join('public').to_s

# this route will be available for both encrypted and non-encrypted connections
shared_route "/people" do |req, res|
	res.body = "your name here\\ngive someone else some credit too...?"
	res['Content-Type'] = 'text/plain'
end

## uncomment the following lines to add an encrypted only route
# route "/login" do |req, res|
# 	# add your code here
# 	res.body = ""
# end

# THIS IS WHERE THE MAGIC STARTS - deletes the DSL and starts the service :)
start

ENDTEMPLATE
		@gemfile_template = <<ENDTEMPLATE
source "https://rubygems.org"

#include the basic anorexic library
gem 'anorexic'

ENDTEMPLATE
		@html_template = <<ENDTEMPLATE
<html>
	<head>
		<title>Feed me!!!</title>
		<style type="text/css">
			body, html
			{
				background-color: #eee;
				padding: 0; margin: 0;
			}
			h1
			{
				background-color: #ddd;
				color: #008;
				text-align: center;
				border-bottom: 1px solid #000;
				margin: 0 0 1em 0;
				padding: 0.5em;
				width: 100%;
			}
			p
			{
				color:#004;
				font-size: 1.2em;
				padding: 0 1em;			
			}
		</style>
	</head>
	<body>
		<h1>Hello World... feed me!</h1>
		<p>you can find this file at ./public/index.html</p>
	</body>
</html>
ENDTEMPLATE
	end
end

######################################################################
# tweek the string class for termial coloring options
class String
  # colorization
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def pink
    colorize(35)
  end
end

######################################################################
######################################################################
##
## Start the Build script
##
######################################################################
######################################################################

if ARGV[0] == 'new' || ARGV[0] == 'n'
	if Dir.exists?(ARGV[1])
		puts ""
		puts "ERROR: dir exists, choose a defferent app name."
		puts ""
		exit
	end
	if ARGV.count > 3 && ARGV[2] == 'with'
		local_gems = Gem::Specification.map {|g| g.name}
		# this will load all requested gems and allow them to update the AppTemplate
		ARGV[3..-1].each do |g|
			begin
				require g if local_gems.include? g
				puts "loaded the #{g} gem, and gave it a change to update the template."
			rescue Exception => e
				
			end
		end
	end

	template = AppTemplate.new
	template.build ARGV[1]
elsif ARGV[0] == 'server' || ARGV[0] == 'start' || ARGV[0] == 's'
	load File.expand_path(Dir["."][0], (File.expand_path(Dir["."][0]).split(/[\\\/]/).last + ".rb") )
else
	puts ""
	puts "Anorexic fast web app starter.".red
	puts "use: anorexic new appname"
	puts "==============================".green
	puts "options:".pink
	puts "option                  description".yellow
	puts "new <appname>           creates a new application called <appname>."
	puts "new <app> with <gem(s)> loads the gem(s) and allows them to update the template before building the app."
	puts "n                       alias for new."
	puts "server                  runs the app."
	puts "start                   alias for server."
	puts "s                       alias for start/server."
	puts ""
end

