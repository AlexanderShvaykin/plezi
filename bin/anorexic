#!/usr/bin/env ruby

require 'rubygems'
require 'irb'

##########
# this is the template writer
#
# you can update it by aliasing the old initialize and writing adding to it:
#
#		if defined? BUILDING_ANOREXIC_TEMPLATE
#			class AppTemplate
#				alias :my_new_gem_old_init :initialize
#				def initialize(appname = ARGV[1])
#					# start with the old initialize, to set the template up
#					my_new_gem_old_init appname
#					# add your gem to the gemfile
#					@gemfile_template << "\n# feed GEMNAME to anorexic"
#					@gemfile_template << "\ngem 'GEMNAME'"
#					# make sure your folder exists, but don't overwrite!!!
#					# if you overwrite!!! you might destroy other gems additions.
#					app_tree["lib"] ||= {}
#					app_tree["MY_SPECIAL_GEM"] ||= {}
#					# once your folder exists, create your file
#					app_tree["lib]["MY_SPECIAL_GEM"]["filename.rb"] = "data"
#					app_tree["file_without_folder"] ||= "data"
#				end
#			end
#		end
#
class AppTemplate

	def initialize(appname = ARGV[1])
		initialize_template_globals
		@app_tree ||= {}

		app_tree["Procfile"] ||= ""
		app_tree["Procfile"] << "\nweb: bundle exec ./#{appname}.rb -p $PORT\n"

		@app_tree["logs"] ||= {}
		@app_tree["config"] ||= {}
		@app_tree["lib"] ||= {}
		@app_tree["app"] ||= {}
		@app_tree["public"] ||= {}
		@app_tree["public"]["index.html"] ||= IO.read(::File.expand_path(File.join("..", "..", "resources" ,"welcome_page.html"),  __FILE__)).gsub('appname', appname)
		@app_tree["Gemfile"] ||= @gemfile_template
		@app_tree["environment.rb"] ||= IO.read ::File.expand_path(File.join("..", "..", "resources" ,"environment.rb"),  __FILE__)
		@app_tree["rakefile.rb"] ||= IO.read ::File.expand_path(File.join("..", "..", "resources" ,"rakefile.rb"),  __FILE__)
		@end_comments = []
	end

	def app_tree
		@app_tree
	end

	def build appname
		@gemfile_template << "\n\n\nruby '#{RUBY_VERSION}'\n"
		begin
			Dir.mkdir appname
			puts "created the #{appname} application directory.".green
		rescue Exception => e
			puts "the #{appname} application directory exists - trying to rebuild (no overwrite).".pink
		end
		Dir.chdir appname
		puts "starting to write template data...".red
		puts ""
		@app_tree["#{appname}.rb"] ||= @default_code
		write_files app_tree
		File.chmod 0775, "#{appname}.rb"
		puts "tried to update execution permissions. this probably failed.".pink
		puts "use: chmod +x ./#{ARGV[1]}.rb to set execution permissions."
		puts ""
		puts "done."
		puts "\n#{@end_comments.join("\n")}"
		puts ""
		puts "please change directory into the app directory: cd #{ARGV[1]}"
		puts ""
		puts "run the #{ARGV[1]} app using: ./#{ARGV[1]}.rb or using: anorexic s"
		puts ""
	end

	def write_files files, parent = "."
		if files.is_a? Hash
			files.each do |k, v|
				if v.is_a? Hash
					begin
						Dir.mkdir k
						puts "    created #{parent}/#{k}".green
					rescue Exception => e
						puts "    exists #{parent}/#{k}".red
					end
					Dir.chdir k
					write_files v, (parent + "/" + k)
					Dir.chdir ".."
				elsif v.is_a? String
					if ::File.exists? k
						if %w{rakefile.rb, Gemfile}.include? k
							old = IO.read k
							old = (old.lines.map {|l| "\##{l}"}).join
							IO.write k, "#####################\n#\n# OLD DATA COMMENTED OUT - PLEASE REVIEW\n#\n##{old}\n#{v}"
							puts "    #{parent}/#{k} WAS OVERWRITTEN, old data was preserved by comenting it out.".pink
							puts "    #{parent}/#{k} PLEASE REVIEW.".pink
							@end_comments << "#{parent}/#{k} WAS OVERWRITTEN, old data was preserved by comenting it out. PLEASE REVIEW."
						else
							puts "    exists #{parent}/#{k}".red
						end
					else
						IO.write k, v
						puts "    wrote #{parent}/#{k}".yellow
					end
				end
			end
		end
	end

	def initialize_template_globals
		@default_code = %q{#!/usr/bin/env ruby
# encoding: UTF-8

# load all framework and gems
require ::File.expand_path(File.join("..", "environment.rb"),  __FILE__)

# ensure development mode? (comment before production, environment dependent)
ENV["RACK_ENV"] ||= "development"

port = ARGV[ARGV.find_index('-p') + 1].to_i if ARGV.find_index('-p')
port ||= 3000

listen port

# add your routes here.

shared_route "/", file_root: Root.join('public').to_s, allow_indexing: false

}
		@gemfile_template = %q{
source "https://rubygems.org"

# include the basic anorexic library
gem 'anorexic'

# enable rake tasks.
# gem 'rake'

# to use pry gem for basic debug ( put `binding.pry` at breake point )
# gem 'pry'
}
	end
end


######################################################################
# tweek the string class for termial coloring options
class String
  # colorization
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def pink
    colorize(35)
  end
end

######################################################################
######################################################################
##
## Start the Build script
##
######################################################################
######################################################################

if ARGV[0] == 'new' || ARGV[0] == 'n' || ARGV[0] == "force"
	#########
	## set up building environment
	BUILDING_ANOREXIC_TEMPLATE = true
	if Dir.exists?(ARGV[1]) && ARGV[0] != "force"
		puts ""
		puts "WARNING: app/folder alread exists, use `anorexic fource #{ARGV[1]} ...` to attempt rebuild (no overwrite).".red
		puts ""
		exit
	end
	if ARGV.count > 3 && (ARGV[2] == 'with' || ARGV[2] == 'w')

		# gem loading
		local_gems = Gem::Specification.map {|g| g.name}
		# this will load all requested gems and allow them to update the AppTemplate
		if ARGV[3] == "all"
			puts "loading gems and giving each gem a chance to update the app template:".yellow
			local_gems.each do |g|
				begin
					puts "loaded the #{g} gem."	if require g				
				rescue Exception => e
					puts "couldn't load the #{g} gem... moving on.".red
				end
			end
		else
			require 'pathname'
			ARGV[3..-1].each do |g|
				if local_gems.include? g
					require g
					puts "loaded the #{g} gem, and gave it a change to update the template."
				else
					puts "Error, the gem: #{g} could not be found!".red
					puts "try first running: gem install #{g}".green
					exit
				end
			end
		end
		true
	end

	# building
	template = AppTemplate.new ARGV[1]
	template.build ARGV[1]
elsif ARGV[0] == 'server' || ARGV[0] == 'start' || ARGV[0] == 's'
	ARGV.shift
	load File.expand_path(Dir["."][0], (File.expand_path(Dir["."][0]).split(/[\\\/]/).last + ".rb") )
elsif ARGV[0] == 'console' || ARGV[0] == 'c'
	NO_ANOREXIC_AUTO_START ||= true
	require File.expand_path(Dir["."][0], (File.expand_path(Dir["."][0]).split(/[\\\/]/).last + ".rb") )
	ARGV.clear
	IRB.setup nil
	IRB.conf[:MAIN_CONTEXT] = IRB::Irb.new.context
	require 'irb/ext/multi-irb'
	IRB.irb nil, self
else
	puts ""
	puts "Anorexic fast web app starter.".pink
	puts "use: anorexic new appname"
	puts "or: anorexic new appname with all"
	puts "==============================".green
	puts "new app options:".pink
	puts "option                  description".yellow
	puts "new <appname>           creates a new application called <appname>."
	puts "n                       alias for new."
	puts "new app with gem        'new' accepts the 'with' paramater (or w for short)."
	puts "starting up an app:".pink
	puts "start                   runs the app. accepts any paramaters the app supports."
	puts "s                       alias for start/server."
	puts "start console innsead of services:".pink
	puts "console                 runs the app. accepts any paramaters the app supports."
	puts "c                       alias for start/server."
	puts "==============================".green
	puts "create an app with specific plugins:".pink
	puts "anorexic new app with gem1 gem2"
	puts "loads the specific gem(s) and allows them to update the template before building the app.".green
	puts ""
	puts "create an app with ALL plugins:".pink
	puts "anorexic n app w all"
	puts "loads the all available gem(s) and allows them to update the template before building the app.".green
	puts ""
	puts "start the application with any paramaters it supports:".pink
	puts "anorexic s -p 80"
	puts "loads the app with paramaters -p 80".green
	puts ""
end



